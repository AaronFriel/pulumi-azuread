// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    public readonly accountEnabled: pulumi.Output<boolean | undefined>;
    public readonly displayName: pulumi.Output<string>;
    public readonly forcePasswordChange: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly mail: pulumi.Output<string>;
    public readonly mailNickname: pulumi.Output<string>;
    public readonly password: pulumi.Output<string>;
    public readonly userPrincipalName: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: UserState = argsOrState as UserState | undefined;
            inputs["accountEnabled"] = state ? state.accountEnabled : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["forcePasswordChange"] = state ? state.forcePasswordChange : undefined;
            inputs["mail"] = state ? state.mail : undefined;
            inputs["mailNickname"] = state ? state.mailNickname : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["userPrincipalName"] = state ? state.userPrincipalName : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if (!args || args.displayName === undefined) {
                throw new Error("Missing required property 'displayName'");
            }
            if (!args || args.password === undefined) {
                throw new Error("Missing required property 'password'");
            }
            if (!args || args.userPrincipalName === undefined) {
                throw new Error("Missing required property 'userPrincipalName'");
            }
            inputs["accountEnabled"] = args ? args.accountEnabled : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["forcePasswordChange"] = args ? args.forcePasswordChange : undefined;
            inputs["mailNickname"] = args ? args.mailNickname : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["userPrincipalName"] = args ? args.userPrincipalName : undefined;
            inputs["mail"] = undefined /*out*/;
        }
        super("azuread:index/user:User", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    readonly accountEnabled?: pulumi.Input<boolean>;
    readonly displayName?: pulumi.Input<string>;
    readonly forcePasswordChange?: pulumi.Input<boolean>;
    readonly mail?: pulumi.Input<string>;
    readonly mailNickname?: pulumi.Input<string>;
    readonly password?: pulumi.Input<string>;
    readonly userPrincipalName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    readonly accountEnabled?: pulumi.Input<boolean>;
    readonly displayName: pulumi.Input<string>;
    readonly forcePasswordChange?: pulumi.Input<boolean>;
    readonly mailNickname?: pulumi.Input<string>;
    readonly password: pulumi.Input<string>;
    readonly userPrincipalName: pulumi.Input<string>;
}
